#include <windows.h>
#include <iostream> 
#include <alerror/alerror.h>
#include <alcommon/alproxy.h>
#include <alcommon/albroker.h>
#include <alproxies/almotionproxy.h>
#include <alproxies/alrobotpostureproxy.h>
#include <math.h>
#include <string>
#include <vector>
#include <deque>

using namespace std;

int main(int argc, char *argv[])
{

	const string brokername="mybroker";
	boost::shared_ptr<AL::ALBroker> broker; 
	const AL::ALValue jointName = " Body";
	try{
		broker=AL::ALBroker::createBroker(brokername, "0.0.0.0", 54000, argv[1],9559);			
	}catch (const AL::ALError& e){
		cerr<<"catch exception"<<e.what()<<endl;
	}

	AL::ALMotionProxy motionProxy;
	AL::ALRobotPostureProxy robotProxy;

	const AL::ALValue RArmNames=AL::ALValue::array("RShoulderPitch","RShoulderRoll","RElbowYaw","RElbowRoll","RWristYaw");

	AL::ALValue RArmAngleLists;
	RArmAngleLists.arraySetSize(5);
	RArmAngleLists[0]=AL::ALValue::array(1.5647,1.5421,1.4825,1.3135,1.094,0.28181,-0.62491,-0.83816,-0.9344,-0.98451);
	RArmAngleLists[1]=AL::ALValue::array(-0.14903,-0.15845,-0.16611,-0.1487,-0.33676,-0.76457,-1.2153,-1.3645,-1.1627,-0.97851);
	RArmAngleLists[2]=AL::ALValue::array(1.5046,1.9267,2.0432,2.0232,1.9306,1.7092,1.4368,0.48928,0.20532,0.12204);
	RArmAngleLists[3]=AL::ALValue::array(0.30906,0.27787,0.24277,0.22215,0.23488,0.26278,0.29167,0.31957,0.34566,0.36655);
	RArmAngleLists[4]=AL::ALValue::array(0,0,0,0,0,0,0,0,0,0);

	AL::ALValue TimeLists;
	TimeLists.arraySetSize(5);
	TimeLists[0]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[1]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[2]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[3]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[4]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);


	motionProxy.angleInterpolation(RArmNames, RArmAngleLists, TimeLists, true);

	RArmAngleLists[0]=AL::ALValue::array(-1.0251,-1.064,-1.1027,-1.141,-1.1782,-1.2114,-1.2348,-1.2427,-1.2397,-1.2371);
	RArmAngleLists[1]=AL::ALValue::array(-0.79154,-0.73665,-0.73331,-0.71295,-0.64151,-0.55683,-0.53545,-0.54201,-0.61286,-0.70323);
	RArmAngleLists[2]=AL::ALValue::array(0.060303,0.000488,-0.0604,-0.12489,-0.19597,-0.26801,-0.31329,-0.3105,-0.29143,-0.31442);
	RArmAngleLists[3]=AL::ALValue::array(0.38445,0.45349,0.61951,0.81515,1.0053,1.1908,1.3943,1.5076,1.2124,0.86497);
	RArmAngleLists[4]=AL::ALValue::array(0,0,0,0,0,0,0,0,0,0);

	TimeLists[0]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[1]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[2]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[3]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[4]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);

	motionProxy.angleInterpolation(RArmNames, RArmAngleLists, TimeLists, true);

	RArmAngleLists[0]=AL::ALValue::array(-1.2402,-1.2483,-1.2596,-1.2727,-1.2864,-1.3186,0.23583,1.1783,1.4898,1.5609);
	RArmAngleLists[1]=AL::ALValue::array(-0.74154,-0.75536,-0.88998,-1.1044,-1.3379,-1.3789,-1.0406,-0.72102,-0.40851,-0.09628);
	RArmAngleLists[2]=AL::ALValue::array(-0.38282,-0.33245,0.052216,0.77767,1.5573,1.9679,2.0398,2.0003,1.9424,1.8838);
	RArmAngleLists[3]=AL::ALValue::array(0.56714,0.39713,0.22836,0.10392,0.12246,0.14871,0.16723,0.18519,0.20314,0.22108);
	RArmAngleLists[4]=AL::ALValue::array(0,0,0,0,-1.64,-1.64,-1.64,-1.64,-1.64,-0.94);

	TimeLists[0]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[1]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[2]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[3]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);
	TimeLists[4]=AL::ALValue::array(0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0);

	motionProxy.angleInterpolation(RArmNames, RArmAngleLists, TimeLists, true);

}